<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【持续更新 | 2022最新】基于 hexo 的 butterfly 优化教程</title>
      <link href="/blog/butterfly-beauty-quick-start.html"/>
      <url>/blog/butterfly-beauty-quick-start.html</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>博主 2018/06/07 配置了一个基于 hexo + next 的博客：<a href="https://inspurer.github.io/">月小水长的个人博客</a>，维护几年有余后，源码或配置暂时丢失，于 2022/01/16 新开了 <a href="https://buyixiao.github.io/">BuyiXiao’s Blog</a> ，算是新的博客旅程，兴许日后会在 <a href="https://inspurer.github.io/">月小水长的个人博客</a> 继续更新…</p><p>本站点基于 hexo 6.0 + butterfly 4.0.1，本文记述了了新博客配置过程的点点滴滴，就如文章摘要所述，<strong>不是臃肿的流水教程，但是小而精的查漏补缺，以及记录常见易错点</strong>。有问题欢迎留言</p><h2 id="hexo-基础配置及-butterfly-基础美化"><a href="#hexo-基础配置及-butterfly-基础美化" class="headerlink" title="hexo 基础配置及 butterfly 基础美化"></a>hexo 基础配置及 butterfly 基础美化</h2><h3 id="官方-quick-start"><a href="#官方-quick-start" class="headerlink" title="官方 quick-start"></a>官方 quick-start</h3><p>博主第一次搭建博客时，收藏了很多 hexo + next 的教程，但是由于站点或主题的不断迭代升级，很多教程都失效了，所以建议基础部分直接看官方最新的教程。</p><div class="note default modern"><p><a href="https://hexo.io/docs/">hexo 框架官方文档</a></p></div><div class="note success simple"><p><a href="https://butterfly.js.org/">butterfly 主题官方教程</a></p></div><h3 id="hexo-常见命令"><a href="#hexo-常见命令" class="headerlink" title="hexo 常见命令"></a>hexo 常见命令</h3><p>1、 hexo init</p><p>创建一个 buyixiao 文件夹并初始化为 hexo 目录</p><blockquote><p>hexo init buyixiao<br>cd buyixiao</p></blockquote><p>2、hexo generate<br>hexo generate 命令用于生成静态文件，一般可以简写为 hexo g</p><blockquote><p>-d 选项，指定生成后部署，与 hexo d -g 等价</p></blockquote><p>3、hexo server<br>hexo server 命令用于启动本地服务器，一般可以简写为 hexo s</p><blockquote><p>-p 选项，指定服务器端口，默认为 4000</p></blockquote><blockquote><p>-i 选项，指定服务器 IP 地址，默认为 0.0.0.0</p></blockquote><blockquote><p>-s 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</p></blockquote><p>本地运行服务器前需要安装 hexo-server 插件</p><blockquote><p>npm install hexo-server –save</p></blockquote><p>4、hexo deploy<br>hexo deploy 命令用于部署网站，一般可以简写为 hexo d</p><blockquote><p>-g 选项，指定生成后部署，与 hexo g -d 等价</p></blockquote><p>5、hexo clean<br>hexo clean 命令用于清理缓存文件，是一个比较常用的命令</p><p>6、hexo –safe<br>hexo –safe 表示安全模式，用于禁用加载插件和脚本</p><p>7、hexo 新建文章</p><blockquote><p>hexo new “这里填入文章的标题”</p></blockquote><h2 id="一些-Tips"><a href="#一些-Tips" class="headerlink" title="一些 Tips"></a>一些 Tips</h2><h3 id="valine-的-placeholder-和-requiredFields-无效"><a href="#valine-的-placeholder-和-requiredFields-无效" class="headerlink" title="valine 的 placeholder 和 requiredFields 无效"></a>valine 的 placeholder 和 requiredFields 无效</h3><div class="note success simple"><p>应该是看了很早的教程，最新的 butterfly 这两个字段应该放在 option 下一级而不是和  option 平级。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">option:</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">send</span> <span class="string">from</span> <span class="string">buyixiao&#x27;s</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [<span class="string">&#x27;nick&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>]</span><br></pre></td></tr></table></figure></div><h3 id="删除-valine-垃圾评论"><a href="#删除-valine-垃圾评论" class="headerlink" title="删除 valine 垃圾评论"></a>删除 valine 垃圾评论</h3><div class="note success simple"><p>很简单，直接去 LeanCloud 后台数据库界面删除对应评论即可。</p></div><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><div class="note success simple"><p>很简单，直接去站点根目录 <code>source/_posts</code> 文件夹中删除文章 md 再 再 <code>hexo clean</code> &amp;<code>hexo g -d</code>。</p></div><h3 id="文章配置多个-tag"><a href="#文章配置多个-tag" class="headerlink" title="文章配置多个 tag"></a>文章配置多个 tag</h3><div class="note success simple"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span> [<span class="string">butterfly</span>,<span class="string">hexo</span>,<span class="string">beauty</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">butterfly</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beauty</span></span><br></pre></td></tr></table></figure></div><h3 id="文章自定义-url"><a href="#文章自定义-url" class="headerlink" title="文章自定义 url"></a>文章自定义 url</h3><p>如何像 <a href="https://buyixiao.github.io/blog/butterfly-beauty-quick-start.html">https://buyixiao.github.io/blog/butterfly-beauty-quick-start.html</a> 一样，加一个前缀 blog？</p><div class="note success simple"><p>在 站点配置文件中搜 permalink</p><p>原来的是这样的，</p><blockquote><p>permalink: :year/:month/:day/:title/</p></blockquote><p>我们改成</p><blockquote><p>permalink: blog/:title_en/</p></blockquote><p>然后在写文章的 md 中加入</p><blockquote><p>title_en: my-defined-url</p></blockquote><p>就能在浏览器通过以下地址访问了</p><blockquote><p>{username}.github.io/blog/my-defined-url</p></blockquote></div><h2 id="文章修改预设-formats"><a href="#文章修改预设-formats" class="headerlink" title="文章修改预设 formats"></a>文章修改预设 formats</h2><div class="note success simple"><p>打开站点根目录下的 scaffolds 文件夹，修改里面的 post.md 即可，page formates 同理</p></div><h2 id="配置美化过程中那些拦路虎"><a href="#配置美化过程中那些拦路虎" class="headerlink" title="配置美化过程中那些拦路虎"></a>配置美化过程中那些拦路虎</h2><p>记录填坑之路，标题是错误，正文是解决办法。</p><h3 id="OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="OpenSSL SSL_read: Connection was reset, errno 10054"></a>OpenSSL SSL_read: Connection was reset, errno 10054</h3><div class="note success simple"><p>在站点配置 git 仓库地址时使用 ssh 地址，不要使用 https 地址。</p></div><h3 id="本地和-github-io-访问不一致"><a href="#本地和-github-io-访问不一致" class="headerlink" title="本地和 github.io 访问不一致"></a>本地和 github.io 访问不一致</h3><div class="note success simple"><p>可能是浏览器有缓存，使用 ctrl + f5 刷新试试。</p><p>如果是本次部署没有任何文章更新，github page 没有识别到文章相关更新，也有可能导致这个问题，建议新建或修改文章时间。</p></div><h3 id="clone-主题时超时"><a href="#clone-主题时超时" class="headerlink" title="clone 主题时超时"></a>clone 主题时超时</h3><div class="note success simple"><p>原因是 github 的 dns 被污染了，打开 <code>C:\Windows\System32\drivers\etc</code> 下的 hosts 文件，配置 github 的 dns 解析。格式如下：</p></div><blockquote><p>140.82.113.3  github.com git<br>199.232.69.194 github.global.ssl.fastly.net<br>185.199.108.153 assets-cdn.github.com</p></blockquote><p>前面的 dns 地址可能需要更换，详情可以参考 <a href="https://blog.csdn.net/ygdxt/article/details/82825013">github 打开很慢的解决办法</a></p><h3 id="butterfly-主题报错-extends-includes-layout-pug-block-content-include…"><a href="#butterfly-主题报错-extends-includes-layout-pug-block-content-include…" class="headerlink" title="butterfly 主题报错 extends includes/layout.pug block content include…"></a>butterfly 主题报错 extends includes/layout.pug block content include…</h3><p>错误具体信息如下</p><div class="note warning simple"><p>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</p></div><p>解决办法是输入命令</p><div class="note success simple"><p>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p></div><p>再 <code>hexo clean</code> &amp;<code>hexo g -d</code> 就好了。</p><h3 id="butterfly-主题报错-if-theme-newest-comments-enable-xxx-read"><a href="#butterfly-主题报错-if-theme-newest-comments-enable-xxx-read" class="headerlink" title="butterfly 主题报错 if theme.newest_comments.enable xxx read"></a>butterfly 主题报错 if theme.newest_comments.enable xxx read</h3><div class="note warning simple"><p>if theme.newest_comments.enable xxx read…</p><p>Cannot read property ‘0’ of null…</p></div><div class="note success simple"><p>原因是，没有配置 comment 就把 newset_comment 开关打开了。</p></div><h3 id="列表页-newset-评论无法显示，文章内评论可以"><a href="#列表页-newset-评论无法显示，文章内评论可以" class="headerlink" title="列表页 newset 评论无法显示，文章内评论可以"></a>列表页 newset 评论无法显示，文章内评论可以</h3><div class="note success simple"><p>情况发生于 Valine 评论系统，解决办法是配置下 serverURLs 为 LeanCloud 提供的 RestAPI 地址。</p></div><h3 id="配置了但是-addtothis-分享系统无效"><a href="#配置了但是-addtothis-分享系统无效" class="headerlink" title="配置了但是 addtothis 分享系统无效"></a>配置了但是 addtothis 分享系统无效</h3><div class="note success simple"><p>应该是没有在 addtothis 后台新建 share_button，选择相应的分享平台并激活按钮。</p></div><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文链接：<a href="https://buyixiao.github.io/blog/butterfly-beauty-quick-start.html">https://buyixiao.github.io/blog/butterfly-beauty-quick-start.html</a></p><p>转载或引用需要注明来源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> hexo </tag>
            
            <tag> beauty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip install 成功了，import 却出错了</title>
      <link href="/blog/pip-install-success-import-fail.html"/>
      <url>/blog/pip-install-success-import-fail.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>可能不少人遇到这样的问题，为什么在 cmd 命令行中 <code>pip install requests</code> 成功了，在 Pycharm 中写代码 <code>import requests</code> 还是报 module not found 错误，装是装上了，又没完全装上，何哉？下面以 requests 这个库为例子，详细说明原因及解决办法。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>根本原因是，<strong>没有认识处理好 python 多版本共存问题，cmd 里装 requests 的 python 环境不是你 pycharm 里面运行的那个 python 环境</strong>。</p><p>在 cmd 输入 <code>pip install requests</code> 前，不妨先输入一个命令，查看有哪些 Python 环境：<code>where python</code></p><p>cmd 显示如下，可以看到，电脑有三个 python 环境，当在命令行输入 python 时，默认进入了第一个 Python36_64 环境，这样的顺序是由编辑系统环境变量的先后顺序决定的</p><blockquote><p>D:\a\b\c\Python36_64\python.exe<br>D:\c\b\a\Python388\python.exe<br>C:\x\y\z\python.exe</p></blockquote><p>然后查看有哪些 pip ：<code>where pip</code></p><blockquote><p>D:\a\b\c\Python36_64\Scripts\pip.exe<br>D:\c\b\a\Python388\Scripts\pip.exe</p></blockquote><p>在 cmd 输入 <code>pip install requests</code> 时，只会给环境变量中从上到下第一个 pip 对应的 Python 环境装的，也就是给 Python36_64 这个环境装的。</p><p>然后看下 Pycharm 中是不是也用的这个 Python 环境，点击菜单栏的 File – Settings</p><p><img src="https://s2.loli.net/2022/01/17/XOf9cv1mFn2wxGa.png" alt="Pycharm 查看 Python 环境.png"></p><p>展开 Python Interpreter，可以看到就是 cmd 里默认的 Python36_64 环境，点击上图中右上角的锯齿状设置按钮，可以给 Pycharm 切换 python 环境。然后这些增删操作看符号就知道了，不赘述。</p><p>如果选中了想要的 python 环境，可以点击上图左下角中的 + 号按钮，搜索 requests 包，点击并安装。</p><p><img src="https://s2.loli.net/2022/01/17/4f9vmuiNy1jL7hC.png" alt="Pycharm 安装库.png"></p><h2 id="cmd-和-Pycharm-换源"><a href="#cmd-和-Pycharm-换源" class="headerlink" title="cmd 和 Pycharm 换源"></a>cmd 和 Pycharm 换源</h2><p>由于某些原因 python 库默认的下载地址下载很慢，在 cmd 中可以依次输入以面命令切换成 douban 源，下载安装就起飞了</p><blockquote><p>pip install pqi<br>pqi use douban</p></blockquote><p>在 Pycharm 中也有等同操作，点击上一个图中的 Manage Repositories ，将 <a href="https://pypi.python.com/simple/">https://pypi.python.com/simple/</a> 修改成   <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a> ，并且一路 OK 确定即可。</p><p>最后再回到 cmd 中</p><blockquote><p>D:\a\b\c\Python36_64\Scripts\pip.exe<br>D:\c\b\a\Python388\Scripts\pip.exe</p></blockquote><p>如果想要快速给第二个 Python388 装 requests，该怎么办呢？我们在文件夹中打开 D:\c\b\a\Python388\Scripts 这个路径。</p><p><img src="https://s2.loli.net/2022/01/17/4GBIcQFVr7dijKU.png" alt="pip 目录"></p><p>我们可以直接在 cmd 中通过 <code>pip3.8 install requests</code> 给这个环境装 requests；</p><p>也可以复制一个 pip.exe，并粘贴命名为 pipenv.exe，<code>pipenv install requests</code>；</p><p>除了 pip3.8 是这个环境独有的，其他两个 pip.exe 和 pip3.exe 在 python36_64 那个环境也有，所以 pip/pip3 命令会被在环境变量中优先级高的 python36_64 的 pip 接管。</p><h2 id="如何避免这种问题"><a href="#如何避免这种问题" class="headerlink" title="如何避免这种问题"></a>如何避免这种问题</h2><p>在系统中只装一个版本的 Python，本着一个项目一个虚拟环境的原则，每次新建项目，用系统的 Python 复制出一个虚拟环境，起个和项目相关的环境名，然后在 Pycharm 选择虚拟环境目录下，Scripts 文件夹下的 python.exe 作为项目的解析器。</p><p>Windows 下创建虚拟环境步骤如下：</p><h4 id="安装-virtualenv"><a href="#安装-virtualenv" class="headerlink" title="安装 virtualenv"></a>安装 virtualenv</h4><blockquote><p>pip install virtualenv</p></blockquote><h4 id="在当前目录下创建虚拟环境"><a href="#在当前目录下创建虚拟环境" class="headerlink" title="在当前目录下创建虚拟环境"></a>在当前目录下创建虚拟环境</h4><blockquote><p>virtualenv env_crawl</p></blockquote><h4 id="激活、退出虚拟环境"><a href="#激活、退出虚拟环境" class="headerlink" title="激活、退出虚拟环境"></a>激活、退出虚拟环境</h4><p>在 cmd 中需要 cd 进入到虚拟环境目录下 Script 文件</p><p>夹中，使用下述命令激活</p><blockquote><p>activate</p></blockquote><p>当然，如果不在 Script 下，但在当前盘符中，使用</p><blockquote><p>./xxx/yyy activate</p></blockquote><p>这种相对路径格式也是可以的。</p><p>激活之后，cmd 会在 path 最前面显示一个 <strong>（{env_crawl})</strong> ，在当前 cmd 会话中 Python 相关的操作都是针对这个虚拟环境而言的，操作和修改不会影响其他 Python 环境。如果想要退出环境，只需要使用</p><blockquote><p>deactivate</p></blockquote><p>值得欣喜的是，<strong>如果在 Pycharm 选择中虚拟环境，那么在 Pycharm 中打开终端，就可以直接进入到了当前的并且是已经激活的虚拟环境</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> pycharm </tag>
            
            <tag> 换源 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在 BuyiXiao&#39;s Blog 开始</title>
      <link href="/blog/why-buyixiao-blog-start.html"/>
      <url>/blog/why-buyixiao-blog-start.html</url>
      
        <content type="html"><![CDATA[<h2 id="who-is-buyixiao"><a href="#who-is-buyixiao" class="headerlink" title="who is buyixiao"></a>who is buyixiao</h2><p>buyixiao 行不改名，坐不改姓；江湖人称 <font color="red">肖不已</font>，或者 <font color="red">布衣肖</font>；三尺微命，一介书生，不足挂齿。<br>buyixiao 在这个互联网中还有其他两个亲兄弟，一个叫 <a href="https://inspurer.github.io/">inspurer</a>，还有一个叫 <a href="https://mp.weixin.qq.com/mp/profile_ext?action=home&__biz=MzUzMDE5MzQ3Ng==#wechat_redirect">月小水长</a>。</p><h2 id="buyixiao’s-skills"><a href="#buyixiao’s-skills" class="headerlink" title="buyixiao’s skills"></a>buyixiao’s skills</h2><p>写过数据分析可视化，会一点爬虫，前 Android 不知名工程师，上线过小程序和 Chrome 扩展，还是一个 Python 全沾工程师…</p><p>之前在某大厂干过开发，现在在家里睡大觉。</p><h2 id="buyixiao’s-blog"><a href="#buyixiao’s-blog" class="headerlink" title="buyixiao’s blog"></a>buyixiao’s blog</h2><p>关于为什么要开这个 blog，有两个原因。</p><p>第一层次的原因是，buyixiao 之前在公众号更新文章，但是该生态比较封闭，而且无法很好修改发布过的文章，还有其他各种限制，所以急切需要一个自主可控的博客系统。</p><p>另一个是因为，buyixiao 老大哥  <a href="https://inspurer.github.io/">inspurer 的个人博客</a> 源代码已经不可考了，而且网站历史包袱太重，包括样式，渲染速度等都积重难返了，所以有 <a href="https://buyixiao.github.io/">buyixiao’s blog</a> 弟承兄业。</p><p>所以这篇文章，还是有一点序的意思。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buyixiao </tag>
            
            <tag> inspurer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
